% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_lockfile.R
\name{validate_lockfile}
\alias{validate_lockfile}
\title{Validate the renv lockfile against a schema}
\usage{
validate_lockfile(
  project = NULL,
  lockfile = NULL,
  lockfile_schema = NULL,
  greedy = FALSE,
  error = FALSE,
  verbose = FALSE
)
}
\arguments{
\item{lockfile}{Contents of the lockfile, or a filename containing one.
If not provided, it defaults to the project's lockfile.}

\item{lockfile_schema}{Contents of the renv schema, or a filename containing a schema.
If not provided, renv's default schema is used.}

\item{greedy}{Boolean. Continue after first error?}

\item{error}{Boolean. Throw an error on parse failure?
If \code{TRUE}, then the function returns \code{NULL} on success.
(i.e., call only for the side-effect of an error on failure, like \code{stopifnot}).}
}
\value{
\code{TRUE} if validation passes. \code{FALSE} if validation fails. If \code{error = TRUE}, returns \code{NULL} on success.
}
\description{
\code{renv::validate_lockfile()} can be used to validate your \code{renv.lock}
against a default or custom schema.
}
\details{
Uses ROpenSci's \href{https://docs.ropensci.org/jsonvalidate/}{\code{jsonvalidate}} package.
}
\examples{
\dontrun{

# validate the project's lockfile
renv::validate_lockfile()

# validate the project's lockfile using a non-default schema
renv::validate_lockfile(lockfile_schema = "/path/to/your/custom/schema")

# validate a lockfile using its path
renv::validate_lockfile(lockfile = "/path/to/your/lockfile")
}
}
